// electron_app/renderer_process/tracker-ui.js

// Assumes necessary DOM elements, electronAPI, AppUIUtils, AppDetailsOverlay, AppRuntime available
// Requires: AppPanelManager

let trackerData = [];
let draggedItemInfo = null;
let currentDragOverElement = null;
const bookSpecsCache = new Map();
const deleteConfirmTimers = new Map();
const DELETE_CONFIRM_TIMEOUT = 2500;
let priceCheckIntervalId = null;
const BOOST_DURATION_MS = 60*60*1000; const BOOST_INTERVAL_MS = 5*60*1000; const NORMAL_INTERVAL_MS = 60*60*1000;
let appStartTime = Date.now(); let isCurrentlyCheckingPrices = false;

const categoryColorPalette = [ {h:210,s:35,l:48},{h:160,s:35,l:42},{h:30,s:40,l:48},{h:280,s:25,l:52},{h:50,s:45,l:50},{h:0,s:40,l:55},{h:100,s:30,l:48},{h:240,s:30,l:55},{h:180,s:25,l:45} ];
function getCategoryColorById(categoryId) { if(!categoryId) return categoryColorPalette[0]; const hash = window.AppUIUtils.simpleHash(categoryId); return categoryColorPalette[hash % categoryColorPalette.length]; }

async function loadAndDisplayTrackedItems() {
    console.log("[Tracker UI] Requesting tracker data load..."); if(window.statusBar) window.statusBar.textContent = 'Loading tracker...';
    if (!window.electronAPI?.loadTrackedBooks) { console.error("[Tracker UI] Cannot load: electronAPI.loadTrackedBooks unavailable."); if(window.statusBar) window.statusBar.textContent = 'Error: Load API unavailable!'; trackerData = [{id:window.AppUIUtils.generateUniqueId(), name:"Default (API Load Failed)", books:[], isCollapsed:false, priceHistory:[]}]; renderCategoriesAndBooks(); stopPriceCheckingInterval(); return; }
    try {
        const loadedData = await window.electronAPI.loadTrackedBooks(); console.log(`[Tracker UI] Received ${loadedData?.length ?? 0} categories.`); bookSpecsCache.clear();
        trackerData = (Array.isArray(loadedData) && loadedData.length > 0) ? loadedData.map(cat => { const id = cat.id || window.AppUIUtils.generateUniqueId(); const books = (cat.books || []).map(b => { if (b.link && b.specs) bookSpecsCache.set(b.link, b.specs); return { ...b, specs:undefined, priceHistory: Array.isArray(b.priceHistory)?b.priceHistory:[] }; }); return { id:id, name:cat.name||"Untitled", isCollapsed:cat.isCollapsed||false, books:books, color:getCategoryColorById(id) }; }) : [{ id: window.AppUIUtils.generateUniqueId(), name:"My First Stack", books:[], isCollapsed:false, color:getCategoryColorById(null), priceHistory:[] }];
        renderCategoriesAndBooks(); applyTrackerColorsToBookList();
        const totalBooks = trackerData.reduce((sum, cat) => sum + (cat.books?.length || 0), 0); if(window.statusBar) window.statusBar.textContent = `Tracker Loaded: ${trackerData.length} stacks, ${totalBooks} items.`; console.log(`[Tracker UI] Load complete. Cache size: ${bookSpecsCache.size}`);
        startPriceCheckingInterval();
    } catch (err) { console.error("[Tracker UI] Error loading/processing tracker data:", err); if(window.statusBar) window.statusBar.textContent = 'Error loading tracker!'; trackerData = [{ id:window.AppUIUtils.generateUniqueId(), name:"Default (Load Error)", books:[], isCollapsed:false, color:getCategoryColorById(null), priceHistory:[] }]; renderCategoriesAndBooks(); alert(`Failed to load tracker data: ${err.message}`); stopPriceCheckingInterval(); }
}

async function saveTrackerData(operationDescription = 'save') {
    console.log(`[Tracker UI] Saving data via IPC (${operationDescription})...`); if(window.statusBar) window.statusBar.textContent = `Saving tracker (${operationDescription})...`;
    if (!window.electronAPI?.saveTrackedBooks) { console.error("[Tracker UI] Cannot save: electronAPI.saveTrackedBooks unavailable."); if(window.statusBar) window.statusBar.textContent = 'Error: Save API unavailable!'; alert("Error: Could not save tracker data."); return; }
    try {
        const dataToSave = trackerData.map(cat => ({ id: cat.id || window.AppUIUtils.generateUniqueId(), name: cat.name || "Untitled", isCollapsed: cat.isCollapsed || false, books: cat.books.map(book => { const specs = bookSpecsCache.get(book.link); const savedBook = { link: book.link, title: book.title, current_price: book.current_price, old_price: book.old_price, voucher_price: book.voucher_price, voucher_code: book.voucher_code, local_image_filename: book.local_image_filename, specs: (specs && !specs.fetchError)?specs:undefined, priceHistory: Array.isArray(book.priceHistory)?book.priceHistory:[] }; if(savedBook.specs===undefined) delete savedBook.specs; return savedBook; }) }));
        const success = await window.electronAPI.saveTrackedBooks(dataToSave);
        if (success) { const totalBooks = trackerData.reduce((sum, cat) => sum + (cat.books?.length || 0), 0); if(window.statusBar) window.statusBar.textContent = `Tracker saved: ${trackerData.length} stacks, ${totalBooks} items.`; applyTrackerColorsToBookList(); }
        else { console.error("[Tracker UI] IPC save reported failure."); if(window.statusBar) window.statusBar.textContent = 'Error saving tracker!'; alert("Error: Could not save tracker data."); }
    } catch (err) { console.error("[Tracker UI] Error during saveTrackerData:", err); if(window.statusBar) window.statusBar.textContent = 'Error saving tracker!'; alert(`Error saving tracker data: ${err.message}`); }
}

function renderCategoriesAndBooks() { if (!window.trackerCategoriesContainer) return; const states={}; window.trackerCategoriesContainer.querySelectorAll('.tracker-category').forEach(el => { if(el.dataset.categoryId) states[el.dataset.categoryId] = el.classList.contains('collapsed'); }); resetAllDeleteConfirmations(); window.trackerCategoriesContainer.innerHTML = ''; if (!trackerData || trackerData.length === 0) { window.trackerCategoriesContainer.innerHTML = '<p class="tracker-node-placeholder">No stacks. Create or drag!</p>'; const ph = window.trackerCategoriesContainer.querySelector('.tracker-node-placeholder'); if(ph) { ph.addEventListener('dragover', handleBookDragOverPlaceholder); ph.addEventListener('dragleave', handleBookDragLeavePlaceholder); ph.addEventListener('drop', handleBookDropInPlaceholder); } return; } window.trackerCategoriesContainer.appendChild(createCategoryDropZoneElement(0)); trackerData.forEach((cat, idx) => { if (!cat || typeof cat !== 'object') { console.warn(`Skipping invalid cat at ${idx}`); return; } if (states[cat.id] !== undefined) cat.isCollapsed = states[cat.id]; if (!cat.color) cat.color = getCategoryColorById(cat.id); const el = createCategoryElement(cat, idx); window.trackerCategoriesContainer.appendChild(el); window.trackerCategoriesContainer.appendChild(createCategoryDropZoneElement(idx + 1)); }); }
function createCategoryElement(cat, idx) { const div = document.createElement('div'); div.className=`tracker-category${cat.isCollapsed?' collapsed':''}`; div.dataset.categoryId=cat.id; if(cat.color){ const alpha=getComputedStyle(document.documentElement).getPropertyValue('--category-base-bg-alpha').trim()||0.5; div.style.backgroundColor=window.AppUIUtils.createHslaColor(cat.color, parseFloat(alpha)); } const hdr=document.createElement('div'); hdr.className='category-header'; hdr.draggable=true; hdr.dataset.categoryId=cat.id; hdr.addEventListener('dragstart', handleCategoryDragStart); hdr.addEventListener('dragend', handleCategoryDragEnd); hdr.addEventListener('mousedown', (e)=>{if(e.target.closest('button,input')){e.stopPropagation();}}, true); const collBtn=document.createElement('button'); collBtn.className='collapse-category-btn'; collBtn.innerHTML=cat.isCollapsed?'Ã¢â€“Â¶':'Ã¢â€“Â¼'; collBtn.title=cat.isCollapsed?'Expand':'Collapse'; collBtn.addEventListener('click', handleCategoryCollapseToggle); const viewBtn=document.createElement('button'); viewBtn.className='view-category-btn'; viewBtn.innerHTML='Ã°Å¸â€˜ Ã¯Â¸ '; viewBtn.title=`Details: ${cat.name||'Unnamed'}`; viewBtn.addEventListener('click', (e)=>{e.stopPropagation(); const c=trackerData.find(c=>c.id===div.dataset.categoryId); if(c&&window.AppDetailsOverlay?.showDetailsOverlay)window.AppDetailsOverlay.showDetailsOverlay({type:'category',...c});}); const nameIn=document.createElement('input'); nameIn.type='text'; nameIn.className='category-name-input'; nameIn.value=cat.name||'Unnamed'; nameIn.dataset.originalName=cat.name||'Unnamed'; nameIn.placeholder='Name'; nameIn.title='Rename'; nameIn.addEventListener('blur',handleCategoryRename); nameIn.addEventListener('keydown',(e)=>{if(e.key==='Enter'){e.preventDefault();nameIn.blur();}else if(e.key==='Escape'){nameIn.value=nameIn.dataset.originalName;nameIn.blur();}}); nameIn.addEventListener('click',(e)=>e.stopPropagation()); const delBtn=document.createElement('button'); delBtn.className='delete-category-btn'; delBtn.innerHTML='Ãƒâ€”'; delBtn.title='Delete stack'; delBtn.addEventListener('click',handleDeleteCategory); hdr.appendChild(collBtn); hdr.appendChild(viewBtn); hdr.appendChild(nameIn); hdr.appendChild(delBtn); const booksCont=document.createElement('div'); booksCont.className='category-books-container'; booksCont.dataset.categoryId=cat.id; booksCont.addEventListener('dragover',handleBookDragOverCategory); booksCont.addEventListener('dragleave',handleBookDragLeaveCategory); booksCont.addEventListener('drop',handleBookDropInCategory); booksCont.addEventListener('dragover',handleNodeDragOver); booksCont.addEventListener('dragleave',handleNodeDragLeave); booksCont.addEventListener('drop',handleNodeDrop); div.appendChild(hdr); div.appendChild(booksCont); renderCategoryBooks(booksCont, cat.books||[], cat.id, cat.color); return div; }
function renderCategoryBooks(cont, books, catId, catColor) { if (!cont) return; cont.innerHTML=''; cont.appendChild(createNodeDropZoneElement(catId, 0)); if (!books || books.length === 0) { const ph=document.createElement('div'); ph.className='tracker-node-placeholder'; ph.textContent='(Drag books here)'; ph.addEventListener('dragover', handleBookDragOverCategory); ph.addEventListener('dragleave', handleBookDragLeaveCategory); ph.addEventListener('drop', handleBookDropInCategory); cont.appendChild(ph); } else { books.forEach((book, idx) => { addSingleTrackerNodeElement(cont, book, catId, catColor); cont.appendChild(createNodeDropZoneElement(catId, idx + 1)); }); } }
function addSingleTrackerNodeElement(cont, book, catId, catColor) { if(!book || (!book.title && !book.link)) { console.warn("Skipping node render, missing title/link:", book); return; } const node=document.createElement('div'); node.className='tracker-node'; node.draggable=true; const link = book.link||`no-link-${Date.now()}-${Math.random().toString(36).substring(7)}`; node.dataset.link=link; node.dataset.categoryId=catId; try{ node.dataset.bookData=JSON.stringify({...book, priceHistory:book.priceHistory||[]}); } catch(e){ node.dataset.bookData='{}'; console.error("Err stringify node data:",e)} if(catColor){ const alpha = getComputedStyle(document.documentElement).getPropertyValue('--node-border-alpha').trim()||0.8; node.style.borderColor = window.AppUIUtils.createHslaColor(catColor, parseFloat(alpha)); } else { node.style.borderColor = 'var(--border-color)'; } const title=document.createElement('span'); title.className='tracker-node-title'; title.textContent=book.title||'Untitled'; title.title=book.title||'Untitled'; const ctrls=document.createElement('div'); ctrls.className='tracker-node-controls'; const remBtn=document.createElement('button'); remBtn.className='remove-node-btn'; remBtn.innerHTML='Ãƒâ€”'; remBtn.title='Remove'; remBtn.addEventListener('click', handleRemoveTrackedItem); ctrls.appendChild(remBtn); node.appendChild(title); node.appendChild(ctrls); node.addEventListener('dragstart', handleNodeDragStart); node.addEventListener('dragend', handleNodeDragEnd); node.addEventListener('click', (e)=>{ if(!e.target.closest('.remove-node-btn')){ try{ const d=JSON.parse(e.currentTarget.dataset.bookData||'{}'); if(window.AppDetailsOverlay?.showDetailsOverlay)window.AppDetailsOverlay.showDetailsOverlay(d); } catch(err){ console.error("Err parse node data click:", err);}}}); const last=cont.lastElementChild; if(last?.classList.contains('drop-zone')){ cont.insertBefore(node, last); } else { cont.appendChild(node); } }
function createNodeDropZoneElement(catId, idx) { const z=document.createElement('div'); z.className='drop-zone node-drop-zone'; z.dataset.categoryId=catId; z.dataset.insertAtIndex=idx; z.addEventListener('dragover',handleNodeDragOver); z.addEventListener('dragleave',handleNodeDragLeave); z.addEventListener('drop',handleNodeDrop); return z; }
function createCategoryDropZoneElement(idx) { const z=document.createElement('div'); z.className='drop-zone category-drop-zone'; z.dataset.insertAtIndex=idx; z.addEventListener('dragover',handleCategoryDragOverContainer); z.addEventListener('dragleave',handleCategoryDragLeaveContainer); z.addEventListener('drop',handleCategoryDrop); return z; }
function applyTrackerColorsToBookList() { if(!window.tabContentContainer) return; const map=new Map(); trackerData.forEach((cat)=>{ if(cat.id&&cat.books&&cat.color){ const alpha=getComputedStyle(document.documentElement).getPropertyValue('--book-item-border-alpha').trim()||0.8; const color=window.AppUIUtils.createHslaColor(cat.color, parseFloat(alpha)); cat.books.forEach(b=>{if(b&&b.link)map.set(b.link,color);}); } }); window.tabContentContainer.querySelectorAll('.book-item').forEach(item=>{ const link=item.dataset.bookLink; if(link&&map.has(link)){ item.style.borderLeftColor=map.get(link); item.classList.add('tracked-by-category'); } else { item.style.borderLeftColor='transparent'; item.classList.remove('tracked-by-category'); } }); }
function isDuplicateTrackedItem(link) { if(!link || typeof link !== 'string') return false; return trackerData.some(cat => cat.books.some(b => b && b.link === link)); }
async function handleCategoryRename(event) { const input=event.target, catEl=input.closest('.tracker-category'), catId=catEl?.dataset.categoryId, delBtn=catEl?.querySelector('.delete-category-btn'); if(delBtn&&catId)resetDeleteConfirmation(delBtn,catId); if(!catId){ console.error("Cannot rename: Missing ID."); input.value=input.dataset.originalName||''; return; } const catIdx = trackerData.findIndex(c=>c.id===catId); if(catIdx===-1){ console.error(`Cat ${catId} not found for rename.`); input.value=input.dataset.originalName||''; return; } const newName=input.value.trim(), origName=trackerData[catIdx].name; if(newName && newName !== origName){ trackerData[catIdx].name=newName; input.dataset.originalName=newName; const viewBtn=catEl.querySelector('.view-category-btn'); if(viewBtn)viewBtn.title=`Details: ${newName}`; await saveTrackerData('rename cat'); } else { input.value=origName; if(newName!==origName)console.log("Rename cancelled (empty)."); } }
async function handleDeleteCategory(event) { event.stopPropagation(); const btn=event.currentTarget, catEl=btn.closest('.tracker-category'), catId=catEl?.dataset.categoryId; if (!catId||!btn) return; const pending=btn.dataset.deletePending==='true'; if(pending){ resetDeleteConfirmation(btn,catId); const catIdx=trackerData.findIndex(c=>c.id===catId); if(catIdx===-1){ catEl.remove(); return; } const remCat=trackerData.splice(catIdx, 1)[0]; if(remCat?.books) remCat.books.forEach(b=>bookSpecsCache.delete(b.link)); const prevZone=catEl.previousElementSibling; catEl.remove(); if(prevZone?.classList.contains('category-drop-zone')) prevZone.remove(); window.trackerCategoriesContainer?.querySelectorAll('.drop-zone.category-drop-zone').forEach((z,i)=>z.dataset.insertAtIndex=i); if(trackerData.length===0 && window.trackerCategoriesContainer) renderCategoriesAndBooks(); await saveTrackerData('delete cat'); } else { resetAllDeleteConfirmations(btn); btn.dataset.deletePending='true'; btn.classList.add('delete-pending'); btn.innerHTML='?'; btn.title='Confirm delete'; const timer=setTimeout(()=>resetDeleteConfirmation(btn,catId), DELETE_CONFIRM_TIMEOUT); deleteConfirmTimers.set(catId, timer); } }
function resetDeleteConfirmation(btn, catId) { if(!btn || !catId) return; const timer=deleteConfirmTimers.get(catId); if(timer){ clearTimeout(timer); deleteConfirmTimers.delete(catId); } btn.classList.remove('delete-pending'); btn.innerHTML='Ãƒâ€”'; btn.title='Delete stack'; delete btn.dataset.deletePending; }
function resetAllDeleteConfirmations(excludeBtn=null) { if(!window.trackerCategoriesContainer) return; window.trackerCategoriesContainer.querySelectorAll('.delete-category-btn.delete-pending').forEach(b => { if(b!==excludeBtn){ const catEl=b.closest('.tracker-category'), catId=catEl?.dataset.categoryId; if(catId)resetDeleteConfirmation(b,catId); } }); }
function handleCategoryCollapseToggle(event) { event.stopPropagation(); const btn=event.currentTarget, catEl=btn.closest('.tracker-category'), catId=catEl?.dataset.categoryId; if (!catEl||!catId) return; const delBtn=catEl.querySelector('.delete-category-btn'); if(delBtn)resetDeleteConfirmation(delBtn,catId); const cat=trackerData.find(c=>c.id===catId); if(!cat) return; const isCollapsed=catEl.classList.toggle('collapsed'); cat.isCollapsed=isCollapsed; btn.innerHTML=isCollapsed?'Ã¢â€“Â¶':'Ã¢â€“Â¼'; btn.title=isCollapsed?'Expand':'Collapse'; saveTrackerData('toggle collapse'); }
async function handleRemoveTrackedItem(event) { event.stopPropagation(); const node=event.target.closest('.tracker-node'), link=node?.dataset.link, catEl=node?.closest('.tracker-category'), catId=catEl?.dataset.categoryId; if (!node||!link||!catId) return; const catIdx=trackerData.findIndex(c=>c.id===catId); if(catIdx===-1){ node.remove(); return; } const cat=trackerData[catIdx]; const bookIdx=cat.books.findIndex(b=>b&&b.link===link); if(bookIdx>-1){ cat.books.splice(bookIdx, 1); bookSpecsCache.delete(link); const booksCont=catEl.querySelector('.category-books-container'); if(booksCont) renderCategoryBooks(booksCont, cat.books, catId, cat.color); else renderCategoriesAndBooks(); await saveTrackerData('remove book'); } else { node.remove(); } }
async function handleAddCategory() { resetAllDeleteConfirmations(); const newCat={id:window.AppUIUtils.generateUniqueId(), name:`Stack ${trackerData.length+1}`, books:[], isCollapsed:false, priceHistory:[], color:getCategoryColorById(null)}; newCat.color=getCategoryColorById(newCat.id); trackerData.push(newCat); renderCategoriesAndBooks(); const newEl=window.trackerCategoriesContainer?.querySelector(`.tracker-category[data-category-id="${newCat.id}"]`); if(newEl){ newEl.scrollIntoView({behavior:'smooth',block:'nearest'}); const input=newEl.querySelector('.category-name-input'); if(input) setTimeout(()=>{input.focus();input.select();},100); } await saveTrackerData('add cat'); }
function createPersistentLottie() { if(!window.addStackLottieContainer) return; window.addStackLottieContainer.innerHTML=''; const p=document.createElement('dotlottie-player'); p.setAttribute('src','https://lottie.host/38d4bace-34fa-46aa-b4ff-f3e36e529bbe/j1vcYhDIk7.lottie'); p.setAttribute('autoplay',''); p.setAttribute('loop',''); p.setAttribute('background','transparent'); p.setAttribute('speed','0.8'); p.title="Add Stack (Button Below)"; window.addStackLottieContainer.appendChild(p); console.log("[Tracker UI] Header Lottie created."); }

// Drag/Drop Handlers (Abbreviated - logic unchanged, just calls updated functions)
function handleBookDragOverCategory(e){if(draggedItemInfo?.type==='book'){e.preventDefault();e.dataTransfer.dropEffect='copy';e.currentTarget.classList.add('drag-over-books');currentDragOverElement=e.currentTarget;}}
function handleBookDragLeaveCategory(e){if(currentDragOverElement===e.currentTarget && !e.currentTarget.contains(e.relatedTarget)){e.currentTarget.classList.remove('drag-over-books');currentDragOverElement=null;}}
async function handleBookDropInCategory(e){if(draggedItemInfo?.type!=='book')return;e.preventDefault();e.stopPropagation();const target=e.currentTarget;target.classList.remove('drag-over-books');currentDragOverElement=null;const catEl=target.closest('.tracker-category'),catId=catEl?.dataset.categoryId;if(!catId){clearDraggedItemInfo();return;}const catIdx=trackerData.findIndex(c=>c.id===catId);if(catIdx===-1){clearDraggedItemInfo();return;}let bookData;try{bookData=draggedItemInfo.data||JSON.parse(e.dataTransfer.getData('application/json'));}catch(err){clearDraggedItemInfo();return;}if(!bookData||!bookData.link){clearDraggedItemInfo();return;}if(isDuplicateTrackedItem(bookData.link)){alert("Book already tracked.");clearDraggedItemInfo();return;}const bookToAdd={...bookData,specs:undefined,priceHistory:[]};trackerData[catIdx].books.push(bookToAdd);const booksCont=catEl.querySelector('.category-books-container');if(booksCont)renderCategoryBooks(booksCont,trackerData[catIdx].books,catId,trackerData[catIdx].color);else renderCategoriesAndBooks();await saveTrackerData('add book');clearDraggedItemInfo();}
function handleBookDragOverPlaceholder(e){if(draggedItemInfo?.type==='book'&&trackerData.length>0){e.preventDefault();e.dataTransfer.dropEffect='copy';e.currentTarget.classList.add('drag-over-books');currentDragOverElement=e.currentTarget;}}
function handleBookDragLeavePlaceholder(e){if(currentDragOverElement===e.currentTarget && !e.currentTarget.contains(e.relatedTarget)){e.currentTarget.classList.remove('drag-over-books');currentDragOverElement=null;}}
async function handleBookDropInPlaceholder(e){if(draggedItemInfo?.type!=='book'||trackerData.length===0)return;e.preventDefault();e.stopPropagation();e.currentTarget.classList.remove('drag-over-books');currentDragOverElement=null;const catId=trackerData[0].id,catIdx=0;let bookData;try{bookData=draggedItemInfo.data||JSON.parse(e.dataTransfer.getData('application/json'));}catch(err){clearDraggedItemInfo();return;}if(!bookData||!bookData.link){clearDraggedItemInfo();return;}if(isDuplicateTrackedItem(bookData.link)){alert("Book tracked.");clearDraggedItemInfo();return;}const bookToAdd={...bookData,specs:undefined,priceHistory:[]};trackerData[catIdx].books.push(bookToAdd);renderCategoriesAndBooks();await saveTrackerData('add placeholder');clearDraggedItemInfo();}
function handleNodeDragStart(e){const n=e.target.closest('.tracker-node'),sCatId=n?.dataset.categoryId,sLink=n?.dataset.link;if(!n||!sCatId||!sLink){e.preventDefault();return;}const sCatIdx=trackerData.findIndex(c=>c.id===sCatId);if(sCatIdx===-1){e.preventDefault();return;}const sCat=trackerData[sCatIdx],sNodeIdx=sCat.books.findIndex(b=>b.link===sLink);if(sNodeIdx===-1){e.preventDefault();return;}setDraggedItemInfo({type:'node',link:sLink,sourceCategoryId:sCatId,sourceNodeIndex:sNodeIdx,data:{...sCat.books[sNodeIdx]}});e.dataTransfer.effectAllowed='move';try{e.dataTransfer.setData('text/plain',sLink);}catch(err){}setTimeout(()=>n.classList.add('dragging'),0);}
function handleNodeDragEnd(e){clearNodeDropZoneStyles();if(draggedItemInfo?.type==='node'&&draggedItemInfo.link){const n=window.trackerCategoriesContainer?.querySelector(`.tracker-node[data-link="${CSS.escape(draggedItemInfo.link)}"]`);n?.classList.remove('dragging');}clearDraggedItemInfo();}
function clearNodeDropZoneStyles(){if(!window.trackerCategoriesContainer)return;window.trackerCategoriesContainer.querySelectorAll('.drop-zone.node-drop-zone.drag-over').forEach(z=>z.classList.remove('drag-over'));currentDragOverElement=null;}
function handleNodeDragOver(e){if(draggedItemInfo?.type!=='node')return;const zone=e.target.closest('.drop-zone.node-drop-zone');if(!zone){if(currentDragOverElement&&e.target.classList.contains('category-books-container'))clearNodeDropZoneStyles();return;}const tCatId=zone.dataset.categoryId,sCatId=draggedItemInfo.sourceCategoryId;if(!tCatId||tCatId!==sCatId){clearNodeDropZoneStyles();return;}e.preventDefault();e.dataTransfer.dropEffect='move';if(currentDragOverElement!==zone){clearNodeDropZoneStyles();zone.classList.add('drag-over');currentDragOverElement=zone;}}
function handleNodeDragLeave(e){if(draggedItemInfo?.type!=='node')return;const z=e.target.closest('.drop-zone.node-drop-zone');if(z&&z===currentDragOverElement&&!z.contains(e.relatedTarget)){z.classList.remove('drag-over');currentDragOverElement=null;}}
async function handleNodeDrop(e){if(draggedItemInfo?.type!=='node')return;e.preventDefault();e.stopPropagation();const zone=e.target.closest('.drop-zone.node-drop-zone');clearNodeDropZoneStyles();if(!zone){clearDraggedItemInfo();return;}const tCatId=zone.dataset.categoryId,idx=parseInt(zone.dataset.insertAtIndex,10),sCatId=draggedItemInfo.sourceCategoryId,sLink=draggedItemInfo.link,sNodeIdx=draggedItemInfo.sourceNodeIndex;if(!sLink||sCatId!==tCatId||isNaN(idx)||isNaN(sNodeIdx)){clearDraggedItemInfo();return;}const catIdx=trackerData.findIndex(c=>c.id===sCatId);if(catIdx===-1){clearDraggedItemInfo();return;}const cat=trackerData[catIdx];if(!Array.isArray(cat.books)){clearDraggedItemInfo();return;}if(sNodeIdx<0||sNodeIdx>=cat.books.length){clearDraggedItemInfo();return;}if(idx<0||idx>cat.books.length){clearDraggedItemInfo();return;}const [item]=cat.books.splice(sNodeIdx,1);if(!item){renderCategoriesAndBooks();clearDraggedItemInfo();return;}const adjIdx=(sNodeIdx<idx)?idx-1:idx;cat.books.splice(adjIdx,0,item);const booksCont=window.trackerCategoriesContainer?.querySelector(`.tracker-category[data-category-id="${sCatId}"] .category-books-container`);if(booksCont)renderCategoryBooks(booksCont,cat.books,sCatId,cat.color);else renderCategoriesAndBooks();await saveTrackerData('reorder book');clearDraggedItemInfo();}
function handleCategoryDragStart(e){if(e.target.closest('button,input')){e.preventDefault();return;}const hdr=e.target.closest('.category-header'),catEl=hdr?.closest('.tracker-category'),sCatId=catEl?.dataset.categoryId;if(!hdr||!catEl||!sCatId){e.preventDefault();return;}const sIdx=trackerData.findIndex(c=>c.id===sCatId);if(sIdx===-1){e.preventDefault();return;}resetAllDeleteConfirmations();setDraggedItemInfo({type:'category',sourceCategoryId:sCatId,sourceIndex:sIdx});e.dataTransfer.effectAllowed='move';try{e.dataTransfer.setData('text/plain',`category-${sCatId}`);}catch(err){}if(window.trackerCategoriesContainer){window.trackerCategoriesContainer.querySelectorAll('.drop-zone.category-drop-zone').forEach(z=>z.classList.add('visible'));}setTimeout(()=>{catEl.classList.add('dragging');hdr.classList.add('dragging');},0);}
function handleCategoryDragEnd(e){if(draggedItemInfo?.type==='category'){const sId=draggedItemInfo.sourceCategoryId;if(window.trackerCategoriesContainer){const catEl=window.trackerCategoriesContainer.querySelector(`.tracker-category[data-category-id="${sId}"]`);catEl?.classList.remove('dragging');catEl?.querySelector('.category-header')?.classList.remove('dragging');}}clearCategoryDropZoneStyles();clearDraggedItemInfo();}
function clearCategoryDropZoneStyles(){if(!window.trackerCategoriesContainer)return;window.trackerCategoriesContainer.querySelectorAll('.drop-zone.category-drop-zone').forEach(z=>z.classList.remove('visible','drop-target-highlight'));currentDragOverElement=null;}
function handleCategoryDragOverContainer(e){if(draggedItemInfo?.type!=='category')return;const zone=e.target.closest('.drop-zone.category-drop-zone.visible');if(!zone){if(currentDragOverElement){currentDragOverElement.classList.remove('drop-target-highlight');currentDragOverElement=null;}return;}e.preventDefault();e.dataTransfer.dropEffect='move';if(currentDragOverElement!==zone){if(currentDragOverElement)currentDragOverElement.classList.remove('drop-target-highlight');zone.classList.add('drop-target-highlight');currentDragOverElement=zone;}}
function handleCategoryDragLeaveContainer(e){if(draggedItemInfo?.type!=='category')return;const z=e.target.closest('.drop-zone.category-drop-zone.visible'),rel=e.relatedTarget?e.relatedTarget.closest('.drop-zone.category-drop-zone.visible'):null;if(currentDragOverElement&&currentDragOverElement===z&&currentDragOverElement!==rel){currentDragOverElement.classList.remove('drop-target-highlight');currentDragOverElement=null;}}
async function handleCategoryDrop(e){if(draggedItemInfo?.type!=='category')return;e.preventDefault();e.stopPropagation();const zone=e.target.closest('.drop-zone.category-drop-zone.visible');clearCategoryDropZoneStyles();if(!zone){clearDraggedItemInfo();return;}const tIdx=parseInt(zone.dataset.insertAtIndex,10),sIdx=draggedItemInfo.sourceIndex,sId=draggedItemInfo.sourceCategoryId;const info={...draggedItemInfo};clearDraggedItemInfo();if(isNaN(tIdx)||sIdx==null||isNaN(sIdx)||!sId)return;if(tIdx===sIdx||tIdx===sIdx+1){renderCategoriesAndBooks();return;}const [cat]=trackerData.splice(sIdx,1);if(!cat){renderCategoriesAndBooks();return;}const adjIdx=(sIdx<tIdx)?tIdx-1:tIdx;trackerData.splice(adjIdx,0,cat);renderCategoriesAndBooks();await saveTrackerData('reorder cat');}
function setDraggedItemInfo(info){draggedItemInfo=info;} function clearDraggedItemInfo(){draggedItemInfo=null;}

/** Fetches prices for a single book using IPC */
async function fetchBookPrices(bookLink, bookTitle = 'book') {
    if (!bookLink) return null;
    console.info(`[Tracker Price Check] Fetching prices for: ${bookTitle} (${bookLink})`);
    try {
        const webviewId = window.AppRuntime?.primaryWebviewId;
        if (!webviewId) throw new Error("Primary webview ID not set for price check.");
        // *** MODIFIED: Call electronAPI ***
        const result = await window.electronAPI.fetchDetailData(webviewId, bookLink);
        if (!result.success) throw new Error(result.error || 'IPC fetchDetailData failed for price check');

        const fetchedPrices = result.prices || {}; // Prices are under 'prices' key
        if (typeof fetchedPrices !== 'object' || fetchedPrices === null) throw new Error("Invalid price data format from IPC.");
        console.info(`[Tracker Price Check] Prices received via IPC for ${bookTitle}:`, fetchedPrices);
        if (result.details && typeof result.details === 'object') bookSpecsCache.set(bookLink, result.details); // Update specs cache too
        return fetchedPrices;
    } catch (error) {
        console.error(`[Tracker Price Check] Error fetching prices for ${bookLink} via IPC:`, error);
        return { fetchError: error.message };
    }
}

/** Main price check cycle function */
async function performPriceCheckCycle() { if(isCurrentlyCheckingPrices){console.warn("[Tracker] Skip cycle, prev running.");return;} if(!trackerData||trackerData.length===0){console.log("[Tracker] No items to check.");scheduleNextPriceCheck();return;} isCurrentlyCheckingPrices=true; const start=Date.now(); let checked=0,updates=false; console.log("[Tracker] Starting price check cycle..."); if(window.statusBar)window.statusBar.textContent='Checking prices...'; for(const cat of trackerData){ if(cat.books&&cat.books.length>0){ for(const book of cat.books){ if(book&&book.link){ const prices=await fetchBookPrices(book.link,book.title); checked++; if(prices&&!prices.fetchError){ if(!Array.isArray(book.priceHistory))book.priceHistory=[]; book.priceHistory.push({timestamp:Date.now(),currentPrice:prices.currentPrice,oldPrice:prices.oldPrice,voucherPrice:prices.voucherPrice,voucherCode:prices.voucherCode}); updates=true; book.current_price=prices.currentPrice; book.old_price=prices.oldPrice; book.voucher_price=prices.voucherPrice; book.voucher_code=prices.voucherCode; } else { console.warn(`[Tracker] Failed prices for "${book.title||book.link}". Err: ${prices?.fetchError||'?'}`); } await new Promise(r=>setTimeout(r,200)); } } } } const dur=Date.now()-start; console.log(`[Tracker] Cycle finished in ${dur/1000}s. Checked: ${checked}.`); if(updates){ console.log("[Tracker] Updates found, saving..."); await saveTrackerData('update prices'); } else { if(window.statusBar)window.statusBar.textContent='Price check complete (no changes).'; } isCurrentlyCheckingPrices=false; scheduleNextPriceCheck(); }
function scheduleNextPriceCheck() { if(priceCheckIntervalId){clearTimeout(priceCheckIntervalId);} const timeSince=Date.now()-appStartTime; let intervalMs=(timeSince<BOOST_DURATION_MS)?BOOST_INTERVAL_MS:NORMAL_INTERVAL_MS; console.log(`[Tracker] Next check in ${intervalMs/1000/60} mins (${(timeSince<BOOST_DURATION_MS)?'Boost':'Normal'}).`); priceCheckIntervalId=setTimeout(()=>performPriceCheckCycle(), intervalMs); }
function startPriceCheckingInterval() { console.log("[Tracker] Init price check schedule..."); stopPriceCheckingInterval(); appStartTime=Date.now(); isCurrentlyCheckingPrices=false; setTimeout(()=>performPriceCheckCycle(), 5000); }
function stopPriceCheckingInterval() { if(priceCheckIntervalId){clearTimeout(priceCheckIntervalId);priceCheckIntervalId=null;console.log("[Tracker] Price check stopped.");} isCurrentlyCheckingPrices=false; }
function setupTrackerEventListeners() { if(!window.addCategoryBtn){console.error("[Tracker] Cannot setup listeners - Add Cat Btn missing.");return;} window.addCategoryBtn.addEventListener('click',handleAddCategory); document.body.addEventListener('click',(e)=>{if(!e.target.closest('.delete-category-btn')){resetAllDeleteConfirmations();}},true); console.log("[Tracker UI] Event listeners setup."); }

window.AppTrackerUI = {
    initialize: async () => { createPersistentLottie(); setupTrackerEventListeners(); await loadAndDisplayTrackedItems(); },
    trackerData, bookSpecsCache, saveTrackerData, loadAndDisplayTrackedItems, applyTrackerColorsToBookList,
    setDraggedItemInfo, clearDraggedItemInfo, stopPriceChecking: stopPriceCheckingInterval
};
console.log("[Tracker UI] Module loaded.");
